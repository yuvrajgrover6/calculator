import 'package:calculator/contants.dart';
import 'package:calculator/modules/currency/API/CurrencyConvert.dart';
import 'package:flutter/material.dart';
import 'package:get/get.dart';

import '../controller/currency_controller.dart';

class CurrencyConverter extends StatelessWidget {
  final focusnode;
  const CurrencyConverter({Key? key, required this.focusnode})
      : super(key: key);

  Widget build(BuildContext context) {
    final List currencies = [
      "AFN",
      "EUR",
      "ALL",
      "DZD",
      "USD",
      "AOA",
      "XCD",
      "ARS",
      "AMD",
      "AWG",
      "AUD",
      "AZN",
      "BSD",
      "BHD",
      "BDT",
      "BBD",
      "BYN",
      "BZD",
      "XOF",
      "BMD",
      "INR",
      "BTN",
      "BOB",
      "BOV",
      "BAM",
      "BWP",
      "NOK",
      "BRL",
      "BND",
      "BGN",
      "BIF",
      "CVE",
      "KHR",
      "XAF",
      "CAD",
      "KYD",
      "CLP",
      "CLF",
      "CNY",
      "COP",
      "COU",
      "KMF",
      "CDF",
      "NZD",
      "CRC",
      "HRK",
      "CUP",
      "CUC",
      "ANG",
      "CZK",
      "DKK",
      "DJF",
      "DOP",
      "EGP",
      "SVC",
      "ERN",
      "SZL",
      "ETB",
      "FKP",
      "FJD",
      "XPF",
      "GMD",
      "GEL",
      "GHS",
      "GIP",
      "GTQ",
      "GBP",
      "GNF",
      "GYD",
      "HTG",
      "HNL",
      "HKD",
      "HUF",
      "ISK",
      "IDR",
      "XDR",
      "IRR",
      "IQD",
      "ILS",
      "JMD",
      "JPY",
      "JOD",
      "KZT",
      "KES",
      "KPW",
      "KRW",
      "KWD",
      "KGS",
      "LAK",
      "LBP",
      "LSL",
      "ZAR",
      "LRD",
      "LYD",
      "CHF",
      "MOP",
      "MKD",
      "MGA",
      "MWK",
      "MYR",
      "MVR",
      "MRU",
      "MUR",
      "XUA",
      "MXN",
      "MXV",
      "MDL",
      "MNT",
      "MAD",
      "MZN",
      "MMK",
      "NAD",
      "NPR",
      "NIO",
      "NGN",
      "OMR",
      "PKR",
      "PAB",
      "PGK",
      "PYG",
      "PEN",
      "PHP",
      "PLN",
      "QAR",
      "RON",
      "RUB",
      "RWF",
      "SHP",
      "WST",
      "STN",
      "SAR",
      "RSD",
      "SCR",
      "SLL",
      "SGD",
      "XSU",
      "SBD",
      "SOS",
      "SSP",
      "LKR",
      "SDG",
      "SRD",
      "SEK",
      "CHE",
      "CHW",
      "SYP",
      "TWD",
      "TJS",
      "TZS",
      "THB",
      "TOP",
      "TTD",
      "TND",
      "TRY",
      "TMT",
      "UGX",
      "UAH",
      "AED",
      "USN",
      "UYU",
      "UYI",
      "UYW",
      "UZS",
      "VUV",
      "VES",
      "VND",
      "YER",
      "ZMW",
      "ZWL",
      "XBA",
      "XBB",
      "XBC",
      "XBD",
      "XTS",
      "XXX",
      "XAU",
      "XPD",
      "XPT",
      "XAG",
      "AFA",
      "FIM",
      "ALK",
      "ADP",
      "ESP",
      "FRF",
      "AOK",
      "AON",
      "AOR",
      "ARA",
      "ARP",
      "ARY",
      "RUR",
      "ATS",
      "AYM",
      "AZM",
      "BYB",
      "BYR",
      "BEC",
      "BEF",
      "BEL",
      "BOP",
      "BAD",
      "BRB",
      "BRC",
      "BRE",
      "BRN",
      "BRR",
      "BGJ",
      "BGK",
      "BGL",
      "BUK",
      "HRD",
      "CYP",
      "CSJ",
      "CSK",
      "ECS",
      "ECV",
      "GQE",
      "EEK",
      "XEU",
      "GEK",
      "DDM",
      "DEM",
      "GHC",
      "GHP",
      "GRD",
      "GNE",
      "GNS",
      "GWE",
      "GWP",
      "ITL",
      "ISJ",
      "IEP",
      "ILP",
      "ILR",
      "LAJ",
      "LVL",
      "LVR",
      "LSM",
      "ZAL",
      "LTL",
      "LTT",
      "LUC",
      "LUF",
      "LUL",
      "MGF",
      "MVQ",
      "MLF",
      "MTL",
      "MTP",
      "MRO",
      "MXP",
      "MZE",
      "MZM",
      "NLG",
      "NIC",
      "PEH",
      "PEI",
      "PES",
      "PLZ",
      "PTE",
      "ROK",
      "ROL",
      "STD",
      "CSD",
      "SKK",
      "SIT",
      "RHD",
      "ESA",
      "ESB",
      "SDD",
      "SDP",
      "SRG",
      "CHC",
      "TJR",
      "TPE",
      "TRL",
      "TMM",
      "UGS",
      "UGW",
      "UAK",
      "SUR",
      "USS",
      "UYN",
      "UYP",
      "VEB",
      "VEF",
      "VNC",
      "YDD",
      "YUD",
      "YUM",
      "YUN",
      "ZRN",
      "ZRZ",
      "ZMK",
      "ZWC",
      "ZWD",
      "ZWN",
      "ZWR",
      "XFO",
      "XRE",
      "XFU",
    ];
    final width = MediaQuery.of(context).size.width;
    final height = MediaQuery.of(context).size.height;
    final CurrencyController controller = Get.put(CurrencyController());

    return Scaffold(
      body: Container(
          child: Obx(() => FutureBuilder(
              future: controller.apicall(),
              builder: (context, snapshot) {
                return Column(
                  children: [
                    SizedBox(height: height * 0.04),
                    ListTile(
                      leading: Container(
                        width: width * 0.2,
                        height: height * 0.2,
                        child: DropdownButtonFormField(
                          decoration: const InputDecoration(),
                          value: controller.currency1.value,
                          items: List.generate(
                            currencies.length,
                            (index) => DropdownMenuItem(
                              value: currencies[index],
                              child: Text(currencies[index]),
                            ),
                          ),
                          onChanged: (value) {
                            controller.currency1.value = value.toString();
                          },
                        ),
                      ),
                      trailing: Container(
                        color: Colors.white,
                        width: width * 0.5,
                        height: height * 0.2,
                        child: TextFormField(
                          focusNode: focusnode,
                          cursorColor: kPrimaryColor,
                          onChanged: (value) {
                            if (value.isEmpty) {
                              controller.amount.value = 0;
                            } else {
                              controller.amount.value = double.parse(value);
                            }
                          },
                          decoration: InputDecoration(
                            border: OutlineInputBorder(
                              borderRadius: BorderRadius.circular(20),
                              borderSide:
                                  const BorderSide(color: kPrimaryColor),
                            ),
                            enabledBorder: OutlineInputBorder(
                              borderRadius: BorderRadius.circular(20),
                              borderSide:
                                  const BorderSide(color: kPrimaryColor),
                            ),
                            focusedBorder: OutlineInputBorder(
                              borderRadius: BorderRadius.circular(20),
                              borderSide:
                                  const BorderSide(color: kPrimaryColor),
                            ),
                          ),
                          autofocus: true,
                          keyboardType: TextInputType.phone,
                        ),
                      ),
                    ),
                    SizedBox(height: height * 0.04),
                    ListTile(
                      leading: Container(
                        width: width * 0.2,
                        height: height * 0.1,
                        child: DropdownButtonFormField(
                          decoration: const InputDecoration(),
                          value: controller.currency2.value,
                          items: List.generate(
                            currencies.length,
                            (index) => DropdownMenuItem(
                              value: currencies[index],
                              child: Text(currencies[index]),
                            ),
                          ),
                          onChanged: (value) {
                            controller.currency2.value = value.toString();
                          },
                        ),
                      ),
                      trailing: Container(
                        width: width * 0.5,
                        height: height * 0.1,
                        child: TextFormField(
                          controller: controller.resultController,
                          readOnly: true,
                          decoration: InputDecoration(
                            border: OutlineInputBorder(
                              borderRadius: BorderRadius.circular(20),
                              borderSide:
                                  const BorderSide(color: kPrimaryColor),
                            ),
                            enabledBorder: OutlineInputBorder(
                              borderRadius: BorderRadius.circular(20),
                              borderSide:
                                  const BorderSide(color: kPrimaryColor),
                            ),
                            focusedBorder: OutlineInputBorder(
                              borderRadius: BorderRadius.circular(20),
                              borderSide:
                                  const BorderSide(color: kPrimaryColor),
                            ),
                          ),
                          autofocus: true,
                          keyboardAppearance: Brightness.dark,
                          keyboardType: TextInputType.phone,
                        ),
                      ),
                    ),
                  ],
                );
              }))),
    );
  }
}
